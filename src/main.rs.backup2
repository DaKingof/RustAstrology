use leptos::*;
use wasm_bindgen::prelude::*;
use web_sys::{console, CanvasRenderingContext2d, HtmlCanvasElement};
use std::f64::consts::PI;

// Current harmonic - starting with 4th harmonic
const CURRENT_HARMONIC: u32 = 4;

// Canvas constants
const CANVAS_SIZE: f64 = 400.0;
const CENTER_X: f64 = 200.0;
const CENTER_Y: f64 = 200.0;
const RADIUS: f64 = 180.0;

// Helper function to convert degrees to canvas coordinates
fn degrees_to_coords(degrees: f64, radius: f64) -> (f64, f64) {
    // Convert to radians, accounting for counterclockwise from top (0° at top)
    let radians = (90.0 - degrees) * PI / 180.0;
    let x = CENTER_X + radius * radians.cos();
    let y = CENTER_Y - radius * radians.sin();
    (x, y)
}

// Left dial component - 360 degree dial with harmonic arms
#[component]
fn LeftDial() -> impl IntoView {
    let canvas_ref = create_node_ref::<leptos::html::Canvas>();

    let render_dial = move || {
        if let Some(canvas) = canvas_ref.get() {
            let canvas_element: HtmlCanvasElement = (*canvas).clone().unchecked_into();
            if let Ok(Some(context)) = canvas_element.get_context("2d") {
                if let Ok(context) = context.dyn_into::<CanvasRenderingContext2d>() {
                    // Clear canvas
                    context.clear_rect(0.0, 0.0, CANVAS_SIZE, CANVAS_SIZE);
                    
                    // Set background
                    context.set_fill_style(&"#1a1a1a".into());
                    context.fill_rect(0.0, 0.0, CANVAS_SIZE, CANVAS_SIZE);
                    
                    // Draw main circle
                    context.set_stroke_style(&"#ffffff".into());
                    context.set_line_width(2.0);
                    context.begin_path();
                    context.arc(CENTER_X, CENTER_Y, RADIUS, 0.0, 2.0 * PI).unwrap();
                    context.stroke();
                    
                    // Draw harmonic arms - number of arms = harmonic * 4
                    let num_arms = CURRENT_HARMONIC * 4; // For 4th harmonic = 16 arms
                    let angle_step = 360.0 / num_arms as f64;
                    
                    context.set_stroke_style(&"#666666".into());
                    context.set_line_width(1.0);
                    
                    for i in 0..num_arms {
                        let angle = i as f64 * angle_step;
                        let (x, y) = degrees_to_coords(angle, RADIUS);
                        
                        context.begin_path();
                        context.move_to(CENTER_X, CENTER_Y);
                        context.line_to(x, y);
                        context.stroke();
                    }
                }
            }
        }
    };

    create_effect(move |_| {
        render_dial();
    });

    view! {
        <div style="display: inline-block; margin: 20px;">
            <canvas 
                node_ref=canvas_ref 
                width=CANVAS_SIZE 
                height=CANVAS_SIZE
                style="border: 1px solid #333; background: #1a1a1a;"
            />
        </div>
    }
}

// Right dial component - harmonic dial with 4 arms
#[component]
fn RightDial() -> impl IntoView {
    let canvas_ref = create_node_ref::<leptos::html::Canvas>();

    let render_dial = move || {
        if let Some(canvas) = canvas_ref.get() {
            let canvas_element: HtmlCanvasElement = (*canvas).clone().unchecked_into();
            if let Ok(Some(context)) = canvas_element.get_context("2d") {
                if let Ok(context) = context.dyn_into::<CanvasRenderingContext2d>() {
                    // Clear canvas
                    context.clear_rect(0.0, 0.0, CANVAS_SIZE, CANVAS_SIZE);
                    
                    // Set background
                    context.set_fill_style(&"#1a1a1a".into());
                    context.fill_rect(0.0, 0.0, CANVAS_SIZE, CANVAS_SIZE);
                    
                    // Draw main circle
                    context.set_stroke_style(&"#ffffff".into());
                    context.set_line_width(2.0);
                    context.begin_path();
                    context.arc(CENTER_X, CENTER_Y, RADIUS, 0.0, 2.0 * PI).unwrap();
                    context.stroke();
                    
                    // Draw 4 arms evenly spaced from 0 degrees
                    let angle_step = 90.0; // 360/4 = 90 degrees apart
                    
                    context.set_stroke_style(&"#666666".into());
                    context.set_line_width(1.0);
                    
                    for i in 0..4 {
                        let angle = i as f64 * angle_step;
                        let (x, y) = degrees_to_coords(angle, RADIUS);
                        
                        context.begin_path();
                        context.move_to(CENTER_X, CENTER_Y);
                        context.line_to(x, y);
                        context.stroke();
                    }
                }
            }
        }
    };

    create_effect(move |_| {
        render_dial();
    });

    view! {
        <div style="display: inline-block; margin: 20px;">
            <canvas 
                node_ref=canvas_ref 
                width=CANVAS_SIZE 
                height=CANVAS_SIZE
                style="border: 1px solid #333; background: #1a1a1a;"
            />
        </div>
    }
}

// Main application component
#[component]
pub fn App() -> impl IntoView {
    view! {
        <div style="
            font-family: Arial, sans-serif; 
            background: #0a0a0a; 
            color: #ffffff; 
            min-height: 100vh; 
            display: flex; 
            flex-direction: column; 
            align-items: center; 
            justify-content: center;
        ">
            <h1 style="margin-bottom: 40px;">"Harmonic Dials"</h1>
            
            <div style="display: flex; gap: 60px; align-items: center;">
                <div style="text-align: center;">
                    <h2 style="margin-bottom: 10px;">"360° Dial"</h2>
                    <p style="margin-bottom: 20px; color: #888;">
                        {format!("{} arms ({}th harmonic × 4)", CURRENT_HARMONIC * 4, CURRENT_HARMONIC)}
                    </p>
                    <LeftDial />
                </div>
                
                <div style="text-align: center;">
                    <h2 style="margin-bottom: 10px;">"Harmonic Dial"</h2>
                    <p style="margin-bottom: 20px; color: #888;">"4 arms"</p>
                    <RightDial />
                </div>
            </div>
        </div>
    }
}

// Entry point
#[wasm_bindgen(start)]
pub fn main() -> Result<(), JsValue> {
    console_error_panic_hook::set_once();
    console_log::init_with_level(log::Level::Debug).expect("error initializing logger");
    
    console::log_1(&"Starting harmonic dials application...".into());
    
    leptos::mount_to_body(App);
    
    Ok(())
}
